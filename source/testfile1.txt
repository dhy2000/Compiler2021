/* Testfile 1 (A-level) */

// Author: 18375354

/* There is n items, each item has m scores. Exclude 2 highest and 2 lowest scores and calculate the average of remaining 4 scores.
 * Sort these averages. What's more, calculate the whole sum of these averages.
 * 1 <= n <= 100, 5 <= m <= 10
 */

int score[100][10];
int ave[100];

const int MOD = (4259+235*243/3+3*4*4*3*6*5/3*9293+385*4346+23643*139+1926+817+1952+1026+2869);

int comp_times = 0;

int compare(int x, int y) {
    comp_times = comp_times + 1;
    if (x == y) { return 0; }
    else 
        if (x < y) return 1;
    else 
    {
        return -1;
    }
    return -2333;
}

int calc_ave(int i, int m) {
    int j = 0, sum;
    sum = (1 + 2) - (1 - -1);

    int max1, max2, min1, min2;
    max1 = 0; max2 = 0;
    min1 = 2147483647;
    min2 = 2147483647;

    while (j < m) {
        if (score[i][j] >= max1) {
            max2 = max1;
            max1 = score[i][j];
        } else if (score[i][j] >= max2) 
            max2 = score[i][j];

        if (score[i][j] <= min1) {
            min2 = min1;
            min1 = score[i][j];
        }
        else if (score[i][j] <= min2) {
            min2 = score[i][j];
        }
        sum = sum + score[i][j];
        j = j + 1;
    }
    sum = sum - (max1 + max2 + min1 + min2);
    return sum / (m - 4);
}

void display_array(int a[], int l, int r) {
    printf("[ ");
    int i = l;
    while (i <= r) {
        printf("%d ", a[i]);
        i = 1 + i;
    }
    printf("]\n");
}

void merge_sort(int a[], int l, int r, int tmp[]) {
    if (l >= r) return;
    int mid = l + (r - l) / 2;
    printf("merge: (%d, %d) mid = %d\n", l, r, mid);
    // split
    merge_sort(a, l, mid, tmp);
    merge_sort(a, mid + 1, r, tmp);

    // merge
    int i = l, j = mid + 1;
    int k = l;

    while (i <= mid && j <= r) {
        if (compare(a[i], a[j]) <= 0) {
            tmp[k] = a[i];
            i = i + 1;
            k = k + 1;
        } else {
            tmp[k] = a[j];
            j = j + 1;
            k = k + 1;
        }
    }
    
    while (i <= mid) {
        tmp[k] = a[i];
        i = i + 1;
        k = k + 1;
    }

    while (j <= r) {
        tmp[k] = a[j];
        j = j + 1;
        k = k + 1;
    }

    i = l;
    while (i < k) {
        a[i] = tmp[i];
        i = i + 1;
    }
    display_array(a, l, r);
}

void sort_ave(int a[], int n) {
    int tmp[100];
    merge_sort(a, 0, n - 1, tmp);
}

int main() {
    printf("18375354\n");
    printf("Input n and m: \n");
    // int n = getint(), m = getint();
    int n = 9999, m = 2333;
    n = getint();
    m = getint();
    if (n < 1 || n > 100 || m < 5 || m > 10) {
        printf("Wrong input range!\n");
        return 0;
    }

    int i = 0;
    while (i < n) {
        int j = 0;
        while (j < m) {
            score[i][j] = getint();
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (n >= i + 1) {
        ave[i] = calc_ave(i, m);
        printf("average [%d] is %d\n", i, ave[i]);
        int j = 1 + i;
        i = j;
    }

    sort_ave(ave, n);

    int total = 0;

    i = 0;
    while (i < n) {
        total = total + ave[i];
        total = total % MOD;
        printf("Score of rank %d is %d.\n", i, ave[i]);
        i = 1 + i;
    }

    printf("Total sum = %d\n", total);

    return 0;
}
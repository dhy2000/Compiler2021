/*/*
 * /testfile created with ``heart'' by 19373384
 *
/
*/
void  _		(){
const int _C= (-5*8)+ + 300/1- -7;
printf ( "19%d384\n", _C + 120%121 - 14);// print 19373384
return;
 }
int DoNotCall(){
while(1){}
return -1;
}
 int addN(int p0, int N){
int i = 0;
while(1){
	if(i == 0){
		i = i + 1;
		continue;
	}else{
		p0 = p0 + 1;
		if(i == N){
			break;
		}
		i = i + 1;
	}
}
return p0;
 }
int add2(int p0){
	return addN(p0, 2);
}
void aAddN(int a[], int length, int N){
	int i = 0;
	while(i < length){
		a[i] = addN(a[i], N);
		i = i + 1;
	}
}
void addBoardcast(int a[][2], int b[], int length){
	int i = 0;
	while(i < length){
		int j = 0;
		while(j < 2){
			a[i][j] = a[i][j] + b[j];
			j = j + 1;
		}
		i = i + 1;
	}
}
 int main(  )
{/*//*//*PrintId*/_();;{}/*//"*/

	printf("const and var // decl and def test\n");
	int f0;
	int f1[2];
	int f2[2][2];
	int g0 = 2, g1[2] = {5, 6}, g2[2][2] = {{7, 10}, {27, 96}};
	const int h1[2] = {1, 3}, h11[2] = {2, 4};
	const int h2[2][2] = {{h11[0], h1[1]}, {h1[0], h11[1]}};
	f1[0] = g1[1];
	f0 = h2[0][1] + f1[0] * g2[1][1];
	printf("expected result: 579, output: %d\n", f0);
	if(579 != f0){
		return 1;
	}

	printf("function (def and )call test\n");
	f1[0] = add2(f0);
	f1[1] = addN(h1[1], 5);
	aAddN(f1, 2, 3);
	f2[0][0] = 5;
	f2[0][1] = 10;
	f2[1][0] = 15;
	f2[1][1] = 20;
	addBoardcast(f2, f1, 2);
	printf("expected result: {{589, 21}, {599, 31}}, output: {{%d, %d}, {%d, %d}}\n", f2[0][0], f2[0][1], f2[1][0], f2[1][1]);
	if(f2[0][0] != 589) return 2;
	if(f2[0][1] != 21) return 2;
	if(f2[1][0] != 599) return 2;
	if(f2[1][1] != 31) return 2;
	
	printf("LExp test, falling into infinite loop indicates an error -- ");
	if(0 || 2 < 1 || 1 > 1 || 3 >= 5 || 7 <= 6 || 9 == 10 || 1 || DoNotCall());
	if(!0 && !2 && DoNotCall());
	printf("pass\n");
	
	printf("simple echo test, get a integer and read back: ");
	int gk;
	gk = getint();
	printf("%d\n", gk);
	
	printf("\n\n================================================================================\n                                     PASSED                                     \n================================================================================\n");
	return 0;
}

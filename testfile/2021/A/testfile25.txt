
const int normalConst1 = 10;
const int normalConst2 = 12, normalConst3 = 13;
const int array1DConst1[3] = {1, 2, 3};
const int array2DConst1[3][2] = {{1, 3}, {3, 5}, {5, 7}};

int array1DVar1[4] = {1, 21, 32, 432};
int array1DVar2[4] = {1, 12, 31, 4332};
int normalVar1 = 21;
int normalVar2 = 22, normalVar3 = 23;
// int array1DVar1[4] = {}; illegal
int array2DVar1[2][3]; 
int array2DVar2[2][2] = {{12, 23}, {1333, 43}}; 
int sum;

void outputInt(int n) {
	printf("%d\n", n);
	return ;
}

void start() {
	printf("19373341\n");
	return;
}

int getArraySum(int num[], int size) { // size < 3
	int temp = 0;
	int ans = 0;
	while (temp < size) {
		ans = ans + num[temp];
		temp = temp + 1;
	}
	return ans;
}

void judgeEvenOdd(int n) {
	if (n % 2 == 0) {
		printf("%d is even!\n", n);
	} else {
		printf("%d is odd!\n", n);
	}
	return ;
}

void judgeArrayAllEven(int para3[][3], int row) {
	int i = 0, j = 0, flag = 0;
	while (i < row) {
		j = 0;
		while (j < 3) {
			if (para3[i][j] % 2 == 0) {
				j = j + 1;
				continue;
			} else {
				flag = 1;
				break;
			}
		}
		if (flag == 1) {
			break;
		}
		i = i + 1;
	}
	if (!flag) {
		printf("All even!\n");
	} else {
		printf("Contains odd!\n");
	}
	return ;
}

int cntEvenNum(int para1[], int size) {
	int i = 0, cnt = 0;
	while (i <= size - 1) {
		if (para1[i] % 2 != 0) {
			continue;
		}
		cnt = cnt + 1;
	}
	printf("array contains %d even number!\n", cnt);
	return cnt; 
}

int get2Max(int m, int n) {
	int ans = m;
	if (m > n) {
		ans = m;
	} else {
		ans = n;
	}
	return ans;
}

int get2Min(int m, int n) {
	int ans = m;
	if (m >= n) {
		ans = n;
	} else {
		ans = m;
	}
	return ans;
}

int main() {
	start();
	int i = 0 + -0, j = 0 - +0;
	int n, mm;
	n = getint();
	mm = getint();
	int nn = 0;
	nn = getint();
	int max;
	max = get2Max(mm, nn);
	int min;
	min = get2Min(mm, nn);
	while (i < 4) {
		array1DVar1[i] = i * i / 4;
		i = i + 1;
	}
	int m;
	m = getArraySum(array1DVar1, 4);
	printf("m = %d, n = %d, mm = %d, nn = %d\n", m, n, mm, nn);
	printf("max of mm and nn: %d; min of mm and nn: %d\n", max, min);
	const int mainConst1 = 10;
	printf("mainConst1 = %d\n", mainConst1);
	printf("Sum of normalConst: %d\n", normalConst1 + normalConst2 + normalConst3);
	judgeEvenOdd(n);
	printf("Sum of array: %d\n", m);
	i = 0;
	while (i < 2) {
		j = 0;
		while (j < 3) {
			array2DVar1[i][j] = 10 * i - j;
			sum =sum + array2DVar1[i][j];
			j = j + 1;
		}
		i = i + 1;
	}
	printf("sum of array: %d\n", sum);
	judgeArrayAllEven(array2DVar1, 2);
	if (mm % 2 == 0 && nn % 2 == 0) {
		printf("%d and %d are both enev!\n", mm, nn);
	}  else if (mm % 2 || nn % 2) {
		printf("%d and %d contains at least an odd!\n", mm, nn);
	}
	if (!(1 - 1)) { // coverage '('Exp')'
		; // coverage Stmt ';'
	} else {
		judgeEvenOdd(array1DVar1[0]);
	}
	if (1) {
		
	}
	return 0;
}

const int const_a = 1;

const int const_b = 2;

const int const_c = +2, const_d = 3;

int int_c = 2 + 1;

int int_d;

int int_e = 2;

const int const_array[1] = {0};

const int const_double[1][1] = {{0}};



int array[100];

int matrix_A[10][10];
int matrix_B[10][10];


void output_id()

{
    if (!0 && 0 || 1) {printf("19373630\n");}
}



void output_a_plus_b(int a, int b) {

    printf("%d\n", a+b);
    return;
}



int A_plus_B(int a, int b) {

    return a + b;

}



int return_one(){

    return 1;

}



int factorial(int n) {

    if (array[n] != 0) {
        return array[n];
    } else {
        array[n - 1] = factorial(n - 1);
        array[n] = array[n - 1] * n;
        return array[n];
    }
    return 0;
}



int isPrime(int n) {
    int i = 3;
    if (n <= 0) {
        return 0;
    }
    if ((n % 2) == 0) {
        return 0;
    }
    while (i < (n / 2)) {
        if (n % i == 0) {
            return 0;
        }
        i = i + 2;
    }
    return 1 + 1 - 1 / 1;
}

int sumMatrix(int array_f[][10]) {
    int i = 0;
    int j;
    int sum = 0;
    while (i < 10) {
        j = 0;
        while (j < 10) {
            sum = sum + array_f[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    return sum;
}

int matrixMulti(int matrix_a[][10], int matrix_b[][10], int row) {
    int matrix_c[10][10];
    int i = 0, j, k;
    while (i < 10) {
        j = 0;
        while (j < 10) {
            k = 0;
            matrix_c[i][j] = 0;
            while (k < 10) {
                matrix_c[i][j] = matrix_c[i][j] + matrix_a[i][k] * matrix_b[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return sumMatrix(matrix_c);
}
int main() {
    output_id();
    printf("%d\n", isPrime(80 + 3 * 3));

    if (const_b >= int_c) {int_d = 1;}

    if (const_b == int_d) {int_e = 0;}

    if (const_b > int_e) {int_d = 3;} else {int_d = 4;}

    int i = 5, j;
    int_c = i + 3 * 2 / 2;
    i = 0;
    while (i < 100) {
        if (i == 0 || i == 1) {
            array[i] = 1;
        } else {
            array[i] = 0;
        }
        i = i + 1;
    }
    i = 5;
    ;
    {}

    while (i < int_c || i > int_c) {

        printf("%d\n", factorial(i));

        i = i + 1;

        if (i == int_c) {break;}
        else {continue;}

    }

    if (i == int_c) {printf("%d\n", return_one());}
    printf("%d\n", A_plus_B(1, 1));
    output_a_plus_b(2, 2);
    i = getint();
    printf("%d\n", i);

    i = +0;
    while (i < 10) {
        j = 0;
        while (j < 10) {
            matrix_A[i][j] = i + 1;
            matrix_B[i][j] = j + 1;
            j = j + 1;
        }
        i = i + 1;
    }

    printf("%d\n", matrixMulti(matrix_A, matrix_B, matrix_A[1][1]));

    return 0;
}
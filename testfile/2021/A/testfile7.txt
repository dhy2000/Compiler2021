
int a[4][4] = {{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};
int b[4][4] = {{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};
int a_row, a_col;
int b_row, b_col;
int c_row, c_col;
int c[4][4] = {{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};
int err;
const int l = 0, r = 0;

void Matrix_mult(){
    int i, j, k;
    i = 0;
    while(i < a_row){
        j = 0;
        while(j < b_col){
            k = 0;
            while(k < a_col){
                c[i][j] = c[i][j] + a[i][k] * b[k][j];
                k = k + 1;
            }
           j = j + 1;
        }
        i = i + 1;
    }
    c_row = i;
    c_col = j;
    return;
}

void Matrix_add(int row, int col){
    int i, j;
    i = 0;
    while(i < row){
        j = 0;
        while(j < col){
            c[i][j] = a[i][j] + b[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    c_row = i;
    c_col = j;
    return;
}

void Matrix_sub(int row, int col){
    int i, j;
    i = 0;
    while(i < row){
        j = 0;
        while(j < col){
            c[i][j] = a[i][j] - b[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    c_row = i;
    c_col = j;
    return;
}

void Error(){
    err = 1;
 
    return;
}

void init(int row, int col){
    int i,j;
    while(i < row){
        j = 0;
        while(j < col){
            c[i][j] = 0;
            j = j + 1;
        }
        i = i + 1;
    }
    return;
}

void Print(int row, int col){
    int i, j;
    i = 0;
    while(i < row){
        j = 0;
        while(j < col){
          
            j = j + 1;
        }
        i = i + 1;
    }
    
    init(row,col);
    return;
}

void meet_conditions(int kind){
    if(kind == 1){
        if(a_row == b_row){
            if(a_col == b_col){
                int row = a_row;
                int col = b_col;
                Matrix_add(row, col);   
            }
        }
        else{
            Error();
        }
    }
    else if(kind == 2){
        if(a_row == b_row){
            if(a_col == b_col){
                int row = a_row;
                int col = b_col;            
                Matrix_sub(row, col);   
            }
        }
        else{
            Error();
        }
    }
    else if(kind == 3){
        if(a_col == b_row){
            Matrix_mult();   
        }
        else{
            Error();
        }
    }
    else{
        Error();
    }
    return;
}

int main(){ 
    printf("19182604\n");
    int i, j;
    int num = 0;
    while(num < 9){
        err = 0;
        a_row = getint();
        a_col = getint();
        i = 0;
        while(i < a_row){
            j = 0;
            while(j < a_col){
                a[i][j] = getint();
                j = j + 1;
            }
            i = i + 1;
        }
        b_row = getint();
        b_col = getint();
        i = 0;
        while(i < b_row){
            j = 0;
            while(j < b_col){
                b[i][j] = getint();
                j = j + 1;
            }
            i = i + 1;
        }
        printf("%d\n",num);
        int kind;
        kind = getint();
        meet_conditions(kind);
        if(err != 1){
            
        }
        num = num + 1;
    }
    return 0;
}

void move(int n, int a, int b, int c) {
	if (n == 2) {{}
		printf("Move from %d to %d\n", a, c);
		printf("Move from %d to %d\n", a, c);
		return;
	{}}
	move(n - 2, a, c, b);;;;;;;;;;;;;;;;;;;;
	printf("Move from %d to %d\n", a, c);;;;
	printf("Move from %d to %d\n", a, c);;;;
	move(n - 2, b, a, c);;;;;;;;;;;;;;;;;;;;
}

void solve(int n, int a, int b, int c) {
	if (n == 2) {{}
		printf("Move from %d to %d\n",a, b);
		printf("Move from %d to %d\n",a, c);
		return;
	{}}
	move(n - 2, a, b, c);;;;;;;;;;;;;;;;;;;;
	printf("Move from %d to %d\n", a, b);;;;
	printf("Move from %d to %d\n", a, b);;;;
	move(n - 2, c, b, a);;;;;;;;;;;;;;;;;;;;
	printf("Move from %d to %d\n", b, c);;;;
	solve(n - 2, a, b, c);;;;;;;;;;;;;;;;;;;
}

void dfs(int src[], int vis[], int reflect[], int cur, int tot) {
	if (cur == tot) {{
		int i = 0;
		while (i < tot) {{
			printf("%d ", src[i] + reflect[i + 1]);
			i = i + 1;
		}}
		printf("\n");
		return;
	}}
	int i = 0;
	while (i < tot) {{
		if (!vis[i]) {{
			vis[i] = 1;
			src[cur] = i;
			dfs(src, vis, reflect, cur + 1, tot);
			vis[i] = 0;
		}}
		i = i + 1;
	}}
	return;
}

void matrixPrint(int src[][5], int total) {
	int i = 0;
	while (i < total) {{
		int j = 0;
		while (j < total) {{
			printf("%d ", src[i][j]);
			j = j + 1;
		}}
		i = i + 1;
	}}
	printf("\n");
	return;
}

void matrixMul(int ans[][5], int srcA[][5], int srcB[][5], int total) {
	int i = 0;
	matrixPrint(srcA, total);
	matrixPrint(srcB, total);
	while (i < total) {{
		int j = 0;
		while (j < total) {{
			int k = 0;
			ans[i][j] = 0;
			while (k < total) {{
				ans[i][j] = ans[i][j] + srcA[i][k] * srcB[k][j];
				k = k + 1;
			}}
			j = j + 1;
		}}
		i = i + 1;
	}}
	matrixPrint(srcA, total);
	matrixPrint(srcB, total);
	matrixPrint(ans, total);
	return;
}


/*

 .----------------.  .----------------.  .----------------.  .-----------------. .----------------.  .----------------. 
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |     ______   | || |  ____  ____  | || |  _________   | || | ____  _____  | || |  _______     | || |  _________   | |
| |   .' ___  |  | || | |_   ||   _| | || | |_   ___  |  | || ||_   \|_   _| | || | |_   __ \    | || | |  _   _  |  | |
| |  / .'   \_|  | || |   | |__| |   | || |   | |_  \_|  | || |  |   \ | |   | || |   | |__) |   | || | |_/ | | \_|  | |
| |  | |         | || |   |  __  |   | || |   |  _|  _   | || |  | |\ \| |   | || |   |  __ /    | || |     | |      | |
| |  \ `.___.'\  | || |  _| |  | |_  | || |  _| |___/ |  | || | _| |_\   |_  | || |  _| |  \ \_  | || |    _| |_     | |
| |   `._____.'  | || | |____||____| | || | |_________|  | || ||_____|\____| | || | |____| |___| | || |   |_____|    | |
| |              | || |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 

*/


int main() {
	int n;
	n = getint();
	printf("19373354\n");
	solve(n, 1, 2, 3);
	n = getint();
	int src[10], a[10] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
	int vis[10], b[10] = {8, 7, 6, 5, 4, 3, 2, 1, 0, 9};
	int c[3][10] = {
		{7, 6, 5, 4, 3, 2, 1, 0, 9, 8},
		{6, 5, 4, 3, 2, 1, 0, 9, 8, 7},
		{5, 4, 3, 2, 1, 0, 9, 8, 7, 6}
	};
	int i = 0;
	while (i < n) {{}
		a[i] = a[i] + c[2][i] + 1;
		b[i] = b[i] + c[2][i] + 2;
		c[0][i] = c[0][i] + c[2][i] + 3;
		c[1][i] = c[1][i] + c[2][i] + 4;
		i = i + 1;
	{}}
	i = 0;
	while (114514) {{}
		vis[i] = 0;
		i = i + 1;
		if (i >= n) break;
	{}}
	dfs(src, vis, a, 0, n);
	i = 0;
	while (114514) {{}
		vis[i] = 0;
		i = i + 1;
		if (i >= n) break;
		else {}
	{}}
	dfs(src, vis, b, 0, n);
	i = 0;
	while (114514) {{}
		vis[i] = 0;
		i = i + 1;
		if (i < n) continue;
		break;
	{}}
	dfs(src, vis, c[0], 0, n);
	i = 0;
	while (114514) {{}
		vis[i] = 0;
		i = i + 1;
		if (i < n) continue;
		else break;
	{}}
	dfs(src, vis, c[1], 0, n);
	int d[5][5] = {
			{307728049, -1625382311, 1271106322, 309930583, 2007032850},
		{1074055550, 2036831205, -492323543, -252604752, 1295820596},
		{728458994, 1673642498, -51943305, -1854253096, -1024571774},
		{1430035460, 1705232663, -1803769826, -1485716863, -1192520056},
		{-1503793409, 2027983592, -1911831470, -1387735054, -274170342}
	};
	int e[5][5] = {
		{-39878981, 1475936537, 1944942266, 1579815806, 1734290467},
		{1606724733, -1839064934, 1749681186, 1409364573, -68127266},
		{1869282840, 1574753938, 1959861217, -425501077, -1281736928},
		{-1304579021, -1777897472, -1921297034, 1623258471, -226241316},
		{824482268, -1840038765, -1238621050, 1453319654, -1338682930}
	};
	int f[5][5];
	matrixMul(f, d, e, 4);
	matrixMul(f, e, d, 5);
	while (114514) {{}
		return 0;
		printf("19373354\n");
	{}}
	return 0;
}
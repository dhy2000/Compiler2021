const int N = 16;
int c;
const int k=0,l=1,n=2;
const int q = 2,qq=3;
int p = 0, pp = 1, ppp = 2;
const int a1[3] = {0,1,2};
const int a2[3][3] = {{3,2,3},{1,7,7},{0,0,0}};
int plus1(int a){
	int c;
	c = a;
	return c + 1;
}
void err(){
	printf("\nerr\n");
}
int first(int a[][3]){
	return a[0][2];
}
void merge(int data[], int left, int mid, int right){
	int midarr[N];
	int i = left;
	while(i <= right){
		midarr[i] = data[i];
		i = i + 1;
	}
	i = left;
	int j = mid + 1;
	int k = 0;
	while(i <= mid && j <= right){
		if(midarr[i] <= midarr[j]){
			data[left + k] = midarr[i];
			i = i + 1;
			k = k + 1;
		} 
		else{
			data[left + k] = midarr[j];
			j = j + 1;
			k = k + 1;
		}
	}
	if(i <= mid){
		while(i <= mid){
			data[left + k] = midarr[i];
			i = i + 1;
			k = k + 1;
		}
	} 
	else{
		while(j <= right){
			data[left + k] = midarr[j];
			j = j + 1;
			k = k + 1;
		}
	}
	return;
}
void merge_sort(int data[], int left, int right){
	if(left >= right){
		return;
	}
	int mid;
	mid = (left + right) / 2;
	merge_sort(data, left, mid);
	merge_sort(data, mid + 1, right);
	merge(data, left, mid, right);
	return;
}
int sum(int b[], int len){
	int i = 0;
	int res = 0;
	while(i < len){
		res = res + b[i];
		i = i + 1;
	}
	return res;
}
int plus(int a, int b) {
	return a + b;
}
void out(int ans) {
	printf("\nanswer is %d", ans);
	return;
}
int main(){
	int i = 1;
	int data[16] = {1, 2, 13, 4, 5, 10, 12, 9, 26, 44, 0, 303, 1000, 32, 54, 123};
	int a,b;
	a= getint();
	i = 0;
	printf("20373374");
	while(i <= a){
		if(i % 4 == 0){
			printf("\nTrue");
			break;
		}
		if(i % 3 == 0){
			continue;
		}
		printf("\nfalse");
	}
	i = 0;
	while (i < N) {
		printf("%d ", data[i]);
		i = i + 1;
	}
	merge_sort(data, 0, N - 1);
	i = 0;
	while (i < N) {
		printf("%d ", data[i]);
		i = i + 1;
	}
	printf("\n%d %d ", N % 3,N * 2);
	printf("sum is %d",sum(data,N));
	int res;
	a = 2;
	b = 3;
	res = plus(a,b);
	out(res);
	int a3[3][3] = {{3,2,3},{1,7,7},{6,7,8}};
	a = 3;
	i = 0;
	while(i <= a){
		if(1){
			printf("\nTrue");
		}
		if(0){
			printf("\ntrue");
		}
		if(!i){
			printf("\nfei");
		}
		if(i > 1){
			printf("\ndayu");
		}
		if(i < 1){
			printf("\nor");
		}
		i = i + 1;
		if(i == 3){
			printf("\n3");
		}
		if(i != 1){
			printf("\nTr1");
		}
	}
	printf("\nend");
	int arr[2][2] = {{1,0},{2,3}};
	printf("%d %d",arr[0][0],10);
	res = plus1(arr[1][0]);
	printf("\n%d",res);
	err();
	int m = +l;
	printf("%d",m);
	m = first(a3);
	printf("%d",m);
	m = -l;
	printf("%d",m);
	m = k;
	printf("%d",m);
	if(m < l){
		printf("%d",l * 3);
	}
	m = n * 9 + 1;
	printf("%d",m);
	{}
	;
	return 0;
}